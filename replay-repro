#!/usr/bin/env ruby

require 'benchmark'
require 'optparse'
require 'json'

# Dependencies
#   * ruby
#   * go (for building mongo-tools; preferably 1.8)
#   * java (for building/running POCDriver)
#   * maven (for building POCDriver)
#   * libpcap (library and headers; for recording workload)
#   * mongod (options; needed if running against local database)

DEFAULT_FORCE = false
DEFAULT_CONFIG = "replay_config.json"
DEFAULT_MONGO_TOOLS_REPOSITORY = 'https://github.com/billybanfield/mongo-tools' 
DEFAULT_MONGO_TOOLS_REVISION = 'SUPPORT-2405'
DEFAULT_MONGOD_HOST = 'localhost'
DEFAULT_MONGOD_PORT = '27017'
DEFAULT_PPROFILE = false
DEFAULT_DIR = '/replay'

DROP_DB = %("db.getSiblingDB('POCDB').dropDatabase()")
SLEEP_TIME = 20

# Parse options
options = {}
OptionParser.new do |opts|
  opts.banner = 'Usage: replay-repro [options]'

  options[:repository] = DEFAULT_MONGO_TOOLS_REPOSITORY
  opts.on('-r', '--repository REPOSITORY',
          'Specify the URL to the mongo-tools repository') do |repository|
    options[:repository] = repository
  end

  options[:checkout] = DEFAULT_MONGO_TOOLS_REVISION
  opts.on('-c', '--checkout CHECKOUT',
          'Specify the revision to checkout before building') do |checkout|
    options[:checkout] = checkout
  end

  options[:host] = DEFAULT_MONGOD_HOST
  opts.on('-t', '--host HOST',
          'Specify the host of the mongod to connect to') do |host|
    options[:host] = host
  end

  options[:port] = DEFAULT_MONGOD_PORT
  opts.on('-p', '--port PORT',
          'Specify the port of the mongod to connect to') do |port|
    options[:port] = port
  end

  options[:config] = DEFAULT_CONFIG
  opts.on('-c', '--config',
          'Specify the config file for runs of this script') do |config|
    options[:config] = config 
  end

  options[:dir] = DEFAULT_DIR
  opts.on('-d', '--dir',
          'Specify the directory output for runs of this script') do |dir|
    options[:dir] = dir 
  end

end.parse!

# Execute a shell command. If it fails, print error message and exit.
def exec!(cmd, msg, measure = false)
  time = Time.now
  ok = system(cmd)
  time = Time.now - time

  return time if ok

  $stderr.puts "error: #{msg}"
  exit 1
end

# Clone a repository.
def clone!(repo, name)
  exec!("git clone #{repo} #{name}", "unable to clone #{name}")
end

# Build the mongo tools.
def build_tools(options)
  name ='mongo-tools'
  tokens = options[:repository].split('/')
  tools_index = tokens.index('mongo-tools')

  if tools_index
    user = tokens[tools_index - 1]
    name = "#{user}-#{name}"
  end

  if options[:force] || !Dir.exists?(name)
    # Clone mongo-tools repo.
    exec!("rm -rf #{name}", 'unable to remove existing mongo-tools repository')
    clone!(options[:repository], name)
  end

  # Checkout specified revision and build the project.
  Dir.chdir(name) do
    current_branch = `git branch`.split("\n").map(&:strip).find { |s| s.start_with?('* ')}[2..-1]
    return [name, false] if current_branch == options[:checkout] && File.exists?('bin/mongoreplay')

    exec!('git clean -fd', 'unable to cleanup repo')
    exec!('git checkout HEAD .', 'unable to cleanup repo')
    exec!("git checkout #{options[:checkout]}", 'unable to checkout specified revision')
    exec!('./build.sh', 'unable to build mongo-tools')
  end

  [name, true]
end

# Replay the workload.
def replay(dirname, file, config, options)
  cmd = "#{dirname}/bin/mongoreplay play -p /#{options[:dir]}/gob/#{file} #{config['flags']} --host mongodb://#{options[:host]}:#{options[:port]} | tee /#{options[:dir]}/results/#{config['name']}.log"
  cmd += " --proffile /#{options[:dir]}/results/cpu-#{config['name']}.prof" if config['proffile']
  exec!("#{cmd} --fullSpeed || #{cmd}", 'unable to replay workload', true)
end

puts '### Building tools ###'
dirname, rebuilt = build_tools(options)


# Parse the config file
file = File.read(options[:config])
configuration = JSON.parse(file)

results = []
configuration['config'].each do |config|
  configuration['files'].each do |fname|
    results << [config['name'], replay(dirname, fname, config, options)]
    puts "=== running time (#{results.last.first} connections): #{results.last.last} ==="
  end
end


puts "final results: "
results.each do |pair|
  puts "#{pair.first} connections: #{pair.last}"
end
